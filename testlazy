> AST equivalent: 
(Letreclazy ("fact",
   (Lambda (["n"],
      (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
         (Mult ((Symbol "n"),
            (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
         ))
      )),
   (Apply ((Symbol "fact"), [(Integer 3)]))))
Reduction at depth: 1
Expression:
(Letreclazy ("fact",
   (Lambda (["n"],
      (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
         (Mult ((Symbol "n"),
            (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
         ))
      )),
   (Apply ((Symbol "fact"), [(Integer 3)]))))
Reduction at depth: 2
Expression:
(Apply ((Symbol "fact"), [(Integer 3)]))
Reduction at depth: 3
Expression:
(Symbol "fact")
Reduction at depth: 4
Expression:
(Lambda (["n"],
   (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
      (Mult ((Symbol "n"),
         (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
      ))
   ))
Evaluates to at depth: 4
(Closure (["n"],
   (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
      (Mult ((Symbol "n"),
         (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
      )),
   [("fact",
     (LazyExpression
        (Lambda (["n"],
           (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
              (Mult ((Symbol "n"),
                 (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]
                    ))
                 ))
              ))
           ))))
     ]
   ))

Evaluates to at depth: 3
(Closure (["n"],
   (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
      (Mult ((Symbol "n"),
         (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
      )),
   [("fact",
     (LazyExpression
        (Lambda (["n"],
           (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
              (Mult ((Symbol "n"),
                 (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]
                    ))
                 ))
              ))
           ))))
     ]
   ))

Reduction at depth: 3
Expression:
(Integer 3)
Evaluates to at depth: 3
(EvtInt 3)

Reduction at depth: 3
Expression:
(IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
   (Mult ((Symbol "n"),
      (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
   ))
Reduction at depth: 4
Expression:
(Lt ((Symbol "n"), (Integer 2)))
Reduction at depth: 5
Expression:
(Integer 2)
Evaluates to at depth: 5
(EvtInt 2)

Reduction at depth: 5
Expression:
(Symbol "n")
Evaluates to at depth: 5
(EvtInt 3)

Evaluates to at depth: 4
(EvtBool false)

Reduction at depth: 4
Expression:
(Mult ((Symbol "n"),
   (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
Reduction at depth: 5
Expression:
(Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))
Reduction at depth: 6
Expression:
(Symbol "fact")
Reduction at depth: 7
Expression:
(Lambda (["n"],
   (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
      (Mult ((Symbol "n"),
         (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
      ))
   ))
Evaluates to at depth: 7
(Closure (["n"],
   (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
      (Mult ((Symbol "n"),
         (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
      )),
   [("fact",
     (LazyExpression
        (Lambda (["n"],
           (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
              (Mult ((Symbol "n"),
                 (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]
                    ))
                 ))
              ))
           ))))
     ]
   ))

Evaluates to at depth: 6
(Closure (["n"],
   (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
      (Mult ((Symbol "n"),
         (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
      )),
   [("fact",
     (LazyExpression
        (Lambda (["n"],
           (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
              (Mult ((Symbol "n"),
                 (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]
                    ))
                 ))
              ))
           ))))
     ]
   ))

Reduction at depth: 6
Expression:
(Sub ((Symbol "n"), (Integer 1)))
Reduction at depth: 7
Expression:
(Integer 1)
Evaluates to at depth: 7
(EvtInt 1)

Reduction at depth: 7
Expression:
(Symbol "n")
Evaluates to at depth: 7
(EvtInt 3)

Evaluates to at depth: 6
(EvtInt 2)

Reduction at depth: 6
Expression:
(IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
   (Mult ((Symbol "n"),
      (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
   ))
Reduction at depth: 7
Expression:
(Lt ((Symbol "n"), (Integer 2)))
Reduction at depth: 8
Expression:
(Integer 2)
Evaluates to at depth: 8
(EvtInt 2)

Reduction at depth: 8
Expression:
(Symbol "n")
Evaluates to at depth: 8
(EvtInt 2)

Evaluates to at depth: 7
(EvtBool false)

Reduction at depth: 7
Expression:
(Mult ((Symbol "n"),
   (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
Reduction at depth: 8
Expression:
(Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))
Reduction at depth: 9
Expression:
(Symbol "fact")
Reduction at depth: 10
Expression:
(Lambda (["n"],
   (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
      (Mult ((Symbol "n"),
         (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
      ))
   ))
Evaluates to at depth: 10
(Closure (["n"],
   (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
      (Mult ((Symbol "n"),
         (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
      )),
   [("fact",
     (LazyExpression
        (Lambda (["n"],
           (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
              (Mult ((Symbol "n"),
                 (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]
                    ))
                 ))
              ))
           ))))
     ]
   ))

Evaluates to at depth: 9
(Closure (["n"],
   (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
      (Mult ((Symbol "n"),
         (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
      )),
   [("fact",
     (LazyExpression
        (Lambda (["n"],
           (IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
              (Mult ((Symbol "n"),
                 (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]
                    ))
                 ))
              ))
           ))))
     ]
   ))

Reduction at depth: 9
Expression:
(Sub ((Symbol "n"), (Integer 1)))
Reduction at depth: 10
Expression:
(Integer 1)
Evaluates to at depth: 10
(EvtInt 1)

Reduction at depth: 10
Expression:
(Symbol "n")
Evaluates to at depth: 10
(EvtInt 2)

Evaluates to at depth: 9
(EvtInt 1)

Reduction at depth: 9
Expression:
(IfThenElse ((Lt ((Symbol "n"), (Integer 2))), (Symbol "n"),
   (Mult ((Symbol "n"),
      (Apply ((Symbol "fact"), [(Sub ((Symbol "n"), (Integer 1)))]))))
   ))
Reduction at depth: 10
Expression:
(Lt ((Symbol "n"), (Integer 2)))
Reduction at depth: 11
Expression:
(Integer 2)
Evaluates to at depth: 11
(EvtInt 2)

Reduction at depth: 11
Expression:
(Symbol "n")
Evaluates to at depth: 11
(EvtInt 1)

Evaluates to at depth: 10
(EvtBool true)

Reduction at depth: 10
Expression:
(Symbol "n")
Evaluates to at depth: 10
(EvtInt 1)

Evaluates to at depth: 9
(EvtInt 1)

Evaluates to at depth: 8
(EvtInt 1)

Reduction at depth: 8
Expression:
(Symbol "n")
Evaluates to at depth: 8
(EvtInt 2)

Evaluates to at depth: 7
(EvtInt 2)

Evaluates to at depth: 6
(EvtInt 2)

Evaluates to at depth: 5
(EvtInt 2)

Reduction at depth: 5
Expression:
(Symbol "n")
Evaluates to at depth: 5
(EvtInt 3)

Evaluates to at depth: 4
(EvtInt 6)

Evaluates to at depth: 3
(EvtInt 6)

Evaluates to at depth: 2
(EvtInt 6)

Evaluates to at depth: 1
(EvtInt 6)

Result: 	(EvtInt 6)
6
> Goodbye!
