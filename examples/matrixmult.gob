let mapn = fun f lists ->
  if (not (lists = [])) then
    if mem [] lists then
     []
    else
      f (map head lists) :: mapn f (map tail lists)
  else [] ;

let matrix_multiply = fun m1 m2 ->
  map
    (fun row ->
      mapn
       (fun column ->
         foldl (fun x y -> x + y) 0
          (map2 (fun x y -> x * y ) row column))
       m2)
    m1 ;

let a = [
  [1, 2],
  [3, 4],
  [5, 6]
] ;

let b =
[
  [1, 2, 3],
  [4, 5, 6]
] ;

let big_a = [
  [3, 5, 1, 9, 5, 3, 5, 0, 6, 7, 1, 9 ],
  [3, 3, 9, 6, 3, 6, 3, 8, 1, 6, 1, 1 ],
  [6, 0, 4, 1, 7, 3, 0, 6, 9, 6, 8, 1 ],
  [7, 6, 8, 9, 6, 1, 3, 2, 0, 3, 2, 8 ],
  [4, 8, 6, 8, 8, 9, 3, 5, 7, 7, 7, 5 ],
  [2, 2, 2, 9, 7, 9, 6, 1, 1, 0, 5, 8 ],
  [2, 0, 4, 5, 9, 7, 7, 1, 2, 3, 0, 2 ],
  [4, 9, 7, 2, 4, 3, 4, 7, 3, 4, 2, 4 ],
  [6, 1, 6, 8, 9, 8, 1, 0, 0, 3, 0, 4 ],
  [1, 1, 9, 3, 0, 4, 9, 8, 0, 4, 4, 7 ],
  [0, 1, 4, 3, 7, 5, 4, 9, 3, 2, 2, 9 ],
  [6, 2, 9, 0, 9, 9, 2, 0, 8, 2, 8, 3 ]
] ;

let big_b = [
  [2, 8, 9, 2, 7, 2, 4, 3, 2, 3, 2, 8],
  [7, 9, 8, 6, 2, 7, 1, 7, 5, 4, 7, 8],
  [8, 9, 3, 3, 1, 1, 4, 1, 3, 9, 9, 5], 
  [4, 1, 3, 6, 0, 0, 0, 6, 0, 6, 9, 2], 
  [7, 9, 1, 1, 8, 2, 7, 1, 0, 9, 6, 9], 
  [5, 8, 6, 3, 1, 2, 5, 1, 6, 3, 9, 8], 
  [1, 9, 8, 6, 0, 9, 7, 7, 4, 4, 7, 1], 
  [2, 1, 4, 5, 9, 7, 6, 9, 0, 7, 1, 9], 
  [0, 5, 4, 9, 6, 6, 1, 7, 0, 8, 6, 2], 
  [9, 4, 9, 0, 3, 1, 9, 4, 5, 8, 6, 3], 
  [0, 2, 2, 1, 9, 3, 6, 0, 0, 7, 7, 3], 
  [6, 6, 7, 9, 1, 4, 4, 8, 5, 5, 5, 2]
] ;

let result = matrix_multiply big_a big_b ;

impure $ IO:print_endline $ result ;